using System;

class BankAccount
{
    public string AccountNumber;
    public string HolderName;
    public double Balance;

    // Base constructor used by derived classes
    public BankAccount(string accNo, string name, double balance)
    {
        AccountNumber = accNo;
        HolderName = name;
        Balance = balance;
    }

    // Method to deposit money into the account
    public void Deposit(double amount)
    {
        Balance += amount;
        Console.WriteLine($"Deposited KES {amount}. New balance: KES {Balance}");
    }

    // Virtual withdraw method, allows overriding
    public virtual void Withdraw(double amount)
    {
        if (Balance >= amount)
        {
            Balance -= amount;
            Console.WriteLine($"Withdrew KES {amount}. New balance: KES {Balance}");
        }
        else
        {
            Console.WriteLine("Insufficient funds!");
        }
    }

    // Show account details
    public void CheckBalance()
    {
        Console.WriteLine($"Account Number: {AccountNumber}");
        Console.WriteLine($"Account Holder: {HolderName}");
        Console.WriteLine($"Account Balance: KES {Balance}");
    }
}

// SavingsAccount class inherits BankAccount and starts with 5000
class SavingsAccount : BankAccount
{
    public SavingsAccount(string accNo, string name)
        : base(accNo, name, 5000) { }

    // Add 5% interest to the balance
    public void AddInterest()
    {
        double interest = Balance * 0.05;
        Balance += interest;
        Console.WriteLine($"Added interest: KES {interest}. New balance: KES {Balance}");
    }
}

// CurrentAccount allows overdraft up to KES 5000 and starts with 10000
class CurrentAccount : BankAccount
{
    private double OverdraftLimit = 5000;

    public CurrentAccount(string accNo, string name)
        : base(accNo, name, 10000) { }

    // Override Withdraw to include overdraft
    public override void Withdraw(double amount)
    {
        if (Balance - amount >= -OverdraftLimit)
        {
            Balance -= amount;
            Console.WriteLine($"Withdrew KES {amount}. New balance: KES {Balance}");
        }
        else
        {
            Console.WriteLine("Overdraft limit exceeded!");
        }
    }
}

// Main program class
class Program
{
    static void Main()
    {
        Console.WriteLine("=== Welcome to Simple Banking System ===");

        // Get basic account details from user
        Console.Write("Enter account number: ");
        string accNo = Console.ReadLine();

        Console.Write("Enter account holder name: ");
        string holderName = Console.ReadLine();

        // Ask user to choose the type of account
        Console.WriteLine("\nSelect account type:");
        Console.WriteLine("1. Savings Account (Starts with KES 5000)");
        Console.WriteLine("2. Current Account (Starts with KES 10000)");
        Console.Write("Enter choice: ");
        string accTypeChoice = Console.ReadLine();

        BankAccount account;

        // Instantiate the correct type of account with predefined starting balance
        if (accTypeChoice == "1")
            account = new SavingsAccount(accNo, holderName);
        else
            account = new CurrentAccount(accNo, holderName);

        // Menu for account operations
        while (true)
        {
            Console.WriteLine("\n--- Account Menu ---");
            Console.WriteLine("1. Deposit");
            Console.WriteLine("2. Withdraw");
            Console.WriteLine("3. Check Balance");
            Console.WriteLine("4. Exit");
            Console.Write("Enter choice: ");
            string choice = Console.ReadLine();

            if (choice == "4") break;

            switch (choice)
            {
                case "1":
                    Console.Write("Enter amount to deposit: ");
                    double dep = Convert.ToDouble(Console.ReadLine());
                    account.Deposit(dep);
                    break;

                case "2":
                    Console.Write("Enter amount to withdraw: ");
                    double wd = Convert.ToDouble(Console.ReadLine());
                    account.Withdraw(wd);
                    break;

                case "3":
                    account.CheckBalance();
                    break;

                default:
                    Console.WriteLine("Invalid option!");
                    break;
            }
        }

        // Apply interest if account is of type SavingsAccount
        if (account is SavingsAccount)
        {
            Console.WriteLine("\nApplying end-of-year interest...");
            ((SavingsAccount)account).AddInterest();
        }

        Console.WriteLine("\nThank you for using our banking system!");
    }
}


       
